#!/bin/bash

#### What does it do ?
# It grabs the bg and fg colors from the current theme (now with python! much
# easier!), and sets them as back or foreground for the Xapps. (they can be
# customized only by Xresources)
# also see forums.bunsenlabs.org/viewtopic.php?id=1941
# 
#  - additionally, it defines colors for dmenu.
#  - it will invert the background color, and slightly darken it, and use the 2
#    resulting colors to create a root window background with xsetroot.
#  - xsetroot will utilize a bitmap, if it exists in the theme's root directory,
#    and is named "xsetrootbitmap.xbm"
#  - if ./conky/theme.conkyrc exists in the theme's root directory, it will be
#    started - but only if it isn't already running. The idea is to have conky
#    display something that visuall enhances the wallpaper, e.g. an emblem, but 
#    of course it can be anything...
#    
# if you don't want some particular function, it is easy to comment it out in the
# MAIN section (line 165 =>)
# 
# #### Requirements:
# 
#  - `python 2.x`, and the `gtk` module. I'm not good with python, but I'm fairly 
# sure that this is included in a package called `pygtk`. And you most probably
# already have it.
#  - `xsetroot`
#  - a fairly recent version of `bash`, I'd guess.  
#  - the optional `do_conky` function relies on `pgrep`.

### GTK2_RC_FILES is probably already part of the env (at least on my systems)
### https://stackoverflow.com/a/11686912
: ${GTK2_RC_FILES=$HOME/.gtkrc-2.0}
# the latter we have to redo time and again, otherwise the script won't work
# when run manually after a theme change.
GTK2_CURRENT_THEME="$(/usr/bin/grep gtk-theme-name $GTK2_RC_FILES|cut -d\" -f2)"
if [ ! -f  ~/.themes/$GTK2_CURRENT_THEME/gtk-2.0/gtkrc ]
then 
       themepath="/usr/share/themes/$GTK2_CURRENT_THEME"
else
       themepath="$HOME/.themes/$GTK2_CURRENT_THEME"
fi

# since dmenu is not an Xapp, this is optional.
# set to empty string to disable.
dmenurc="$HOME/.config/dmenu/dmenurc"
#~ dmenurc=""

# font definitions in dmenu 4.6 are unclear to me. they also differ from
# suckless-tools 4.5 - one cannot pass xfont-strings.
# the one below should work on all systems, or at least fail silently.
dmenufont="terminus"

colorfile="$HOME/.local/share/xorg/xapps-col.xres"

########################## FUNCTIONS BEGIN ####################################

adjust_xapps ()
{
##backgr
#~ printf "XCalc.ti.Command.background: ${fgbg[1]}
#~ "   >> "$colorfile"
#~ printf "XCal*background: ${fgbg[1]}
#~ " >> "$colorfile"
printf "XFontSel*background:  ${fgbg[1]}
"   >> "$colorfile"
printf "display.background:  ${fgbg[1]}
"   >> "$colorfile"
printf "bitmap*background:  ${fgbg[1]}
"   >> "$colorfile"
printf "Xmag*background:  ${fgbg[1]}
"   >> "$colorfile"
printf "Xmag*helpLabel*background:  ${fgbg[0]}
"   >> "$colorfile"
printf "Xman*background:  ${fgbg[1]}
"   >> "$colorfile"
printf "xpdf*background:  ${fgbg[1]}
"   >> "$colorfile"
printf "xpdf*matteColor:  ${fgbg[1]}
"   >> "$colorfile"
printf "xscreensaver*background:  ${fgbg[1]}
"   >> "$colorfile"
#~ printf "*background:  ${fgbg[1]}
#~ "   >> "$colorfile"
##forg
#~ printf "XCalc.ti.Command.foreground:  ${fgbg[0]}
#~ " >> "$colorfile"
#~ printf "XCal*foreground: ${fgbg[0]} 
#~ " >> "$colorfile"
printf "XFontSel*foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "display.foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "bitmap*foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "Xmag*foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "Xmag*helpLabel*foreground:  ${fgbg[1]}
"   >> "$colorfile"
printf "Xman*foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "xpdf*foreground: ${fgbg[0]} 
" >> "$colorfile"
printf "xscreensaver*foreground: ${fgbg[0]} 
" >> "$colorfile"
#~ printf "*foreground: ${fgbg[0]} 
#~ " >> "$colorfile"

# the rest is only necessary if you don't run xappspicker at each login:
#~ includestring="#include <$colorfile>"
#~ xresources="$HOME/.Xresources"
#~ [[ "$(tail -1 "$xresources")" != "$includestring" ]] && echo "$includestring" >> "$xresources"
}

adjust_dmenu ()
{
[ -n "$dmenufont" ] && echo -n "-fn $dmenufont " > "$dmenurc"
echo "-nb ${fgbg[1]} -nf ${fgbg[0]} -sb ${fgbg[0]} -sf ${fgbg[1]} " >> "$dmenurc"
echo "Created $dmenurc."
}

grepcol ()
{
# uses a tiny python2 snippet
# fgbg array: fgbg[0] is foreground, fgbg[1] is background
fgbg=($(python2 -c 'import gtk
w = gtk.Window()
w.realize()
style=w.get_style()
print style.fg[gtk.STATE_NORMAL].to_string()
print style.bg[gtk.STATE_NORMAL].to_string()
print style.base[gtk.STATE_SELECTED].to_string()' 2>/dev/null))
# the third one is the background for selected text, aka Highlight

hex12to6
}

hex12to6 ()
{
  for (( i=0 ; i<${#fgbg[@]} ; i++ ))
  do
    # simply discard the last 2 digits of each red, green and blue
    fgbg[i]="#${fgbg[i]:1:2}${fgbg[i]:5:2}${fgbg[i]:9:2}"
  done
}

invert ()
{
  # inverts colors
  r=${1:1:2}
  g=${1:3:2}
  b=${1:5:2}
  printf "#%02x%02x%02x\n" $((16#FF - 16#$r)) $((16#FF - 16#$g)) $((16#FF - 16#$b))
}

# this function halves a color value. deprecated in favor of fixed_value.
# (half of black is still black, so this function is not so useful in automated
# application)
#~ half ()
#~ {
  #~ printf "#%02x%02x%02x" $((16#${1:1:2} / 2)) $((16#${1:3:2} / 2)) $((16#${1:5:2} / 2)) 
#~ }

hextriplet2float ()
{
  # convert the hex representation of one of r,g,b to a float between 0 and 1
  bc<<<"obase=10; ibase=16; scale=3; $1/FF"
}
float255 ()
{
  # multiply a float between 0 and 1 by 255, doh.
  bc<<<"$1*255"
}
fixed_value ()
{
  # sets the value of 1 color to $fixedval, leaving hue and saturation intact.
  r=${1:1:2}
  r="$(hextriplet2float ${r^^})"
  g=${1:3:2}
  g="$(hextriplet2float ${g^^})"
  b=${1:5:2}
  b="$(hextriplet2float ${b^^})"
  rgb="$r,$g,$b"
  hsv="$(python2 -c "import colorsys
print colorsys.rgb_to_hsv($rgb)")"

  huesat="${hsv%,*}"
  huesat="${huesat##*(}"
  hsv="$huesat,$fixedval"
  rgb="$(python2 -c "import colorsys
print colorsys.hsv_to_rgb($hsv)")"

  rg="${rgb%,*}"
  r="${rg%%,*}"
  r="${r##*(}"
  g="${rg##*,}"
  b="${rgb##*,}"
  b="${b%%)*}"

  r="$(float255 $r)"
  r="${r%%.*}"
  g="$(float255 $g)"
  g="${g%%.*}"
  b="$(float255 $b)"
  b="${b%%.*}"
  printf "#%02x%02x%02x" $r $g $b
}

do_xsetroot ()
{
xsetrootbitmap="$themepath/xsetrootbitmap.xbm"
if [ -r "$xsetrootbitmap" ] ; then
  xsetroot -fg "$1" -bg "$2" -bitmap "$xsetrootbitmap"
else
  xsetroot -fg "$1" -bg "$2" -mod $(( $RANDOM%15 + 2)) $(( $RANDOM%15 + 2))
fi
}

do_conky ()
{
  local pid="$(pgrep -f 'conky -c ./theme.conkyrc')"
  [[ "x$pid" != "x" ]] && kill "$pid"
  cd "$themepath/conky/"
  [ -r "$themepath/conky/theme.conkyrc" ] && conky -c "./theme.conkyrc" & disown
}
######################## FUNCTIONS END ########################################

######################## MAIN BEGIN ###########################################

rm -f "$colorfile"

grepcol

adjust_xapps

xrdb -merge "$colorfile"

[ -n "$dmenurc" ] && adjust_dmenu

fixedval="0.2"
xsetrootbg="$(fixed_value "${fgbg[2]}")" # that is the background for selected text, aka Highlight
fixedval="0.1"
xsetrootfg="$(fixed_value "${fgbg[2]}")" # that is the background for selected text, aka Highlight

#~ xsetrootbg="$(invert "${fgbg[0]}")" # that is the foreground
#~ xsetrootfg="$(invert "${fgbg[1]}")" # that is the background

do_xsetroot "$xsetrootfg" "$xsetrootbg"

do_conky
