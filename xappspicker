#!/bin/bash

# https://github.com/ohnonot/
# also see forums.bunsenlabs.org/viewtopic.php?id=1941

# Please also read and make your adjustments in the
# MAIN section (at the bottom of this script)

#### What does `xappspicker` do ?
# 
# The current theme folder is chosen through the file `~/.gtkrc-2.0`, which is
# typically modified by an application like `lxapearance` (works great on _any_
# desktop), but can also be edited manually.
# 
# It then grabs some colors from the current gtk2 theme:
# 
# 0. base foreground
# 1. base background
# 2. selected text foreground
# 3. selected text background
# 
# and puts them into the `fgbg` array.
# 
# It then executes functions that use these colors to style some apps:
# - adjust_xapps: create an additional file with X resources, and make sure 
#   it is sourced (see man xrdb) 
# - adjust_dmenu: define colors for dmenu, if you use a dmenurc file (see 
#   the included dmenu wrapper script)
# - adjust_xsetroot: create a root window background with xsetroot.
#   xsetroot will use a random bitmap from a defined folder, or use
#   `xsetrootbitmap.xbm` if it exists in the theme's root directory, or generate
#   a random -mod pattern (see `man xsetroot`).
#   color adjustments are possible, please see towards the end of the script.
# - adjust_tint2: if the theme folder contains `tint2/tint2rc`, tint2 will be
#   started with this config file, otherwise tint2 will be started with its
#   default config file (usually `~/.config/tint2/tint2rc`).
# - The script also looks for an executable file called `xappspicker.exec` in
#   the current theme folder, and executes it if found. It can be anything,
#   a shell or python script, a C program...
# 
# *Please read and make your adjustments in the MAIN section at the bottom of
# the script!*
# 
#### Requirements:
# 
#  - `python 2.x`, and the `gtk` module. I'm fairly sure that this is included in
#    a package called `pygtk`. And you most probably already have it.
#  - `xsetroot`
#  - a fairly recent version of `bash`, I'd guess.  
#  - `bc` (command line calculator).
#  - `hexdump` and `shuf` for the posix compliant random functions.
#  
#### Tips
# 
# It is possible to simply run the script as is at login.
# However, it isn't exactly fast and might create a noticeable lag during
# login.
# To avoid that, the script generates a file `$HOME/.local/share/xorg/xappspicker_rc`.  
# The idea is:
# 
# * Instead of executing the script, source `$HOME/.local/share/xorg/xappspicker_rc`
#   at login.
# * Set up `inotifywatch` (or some such) to watch for changes in `~/.gtkrc-2.0` and
#   execute the script only when needed.
# 
# You can achieve this by adding something like this to your autostart file (typically
# `~/.xinitrc` or `~/.config/openbox/autostart`):
# 
#     dash -c '. "$HOME/.local/share/xorg/xappspicker_rc";sleep 5; while :; do inotifywait -e modify $HOME/.gtkrc-2.0; /path/to/xappspicker; done' &
# 
# I recommend using dash instead of bash; it is much faster, and everything has
# been tested to work with dash's limited capabilities.
# 
# You can symlink the script `xappspicker` to somewhere in your `$PATH`; however,
# do not copy over the actual script.

# the directory where the script itself (and files it depends upon) resides.
# ( symlinking the executable to e.g. $HOME/bin does not break this )
SCRIPT_DIR="$(readlink "$0")"
if [ -z "$SCRIPT_DIR" ]; then
  SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
else
  SCRIPT_DIR="${SCRIPT_DIR%/*}"
fi

### GTK2_RC_FILES is probably already part of the env (at least on my systems)
### https://stackoverflow.com/a/11686912
: ${GTK2_RC_FILES=$HOME/.gtkrc-2.0}
# the latter we have to redo time and again, otherwise the script won't work
# when run manually after a theme change.
GTK2_CURRENT_THEME="$($(which grep) gtk-theme-name $GTK2_RC_FILES|cut -d\" -f2)"
if [ -f  "$HOME/.themes/$GTK2_CURRENT_THEME/gtk-2.0/gtkrc" ]
then 
       themepath="$HOME/.themes/$GTK2_CURRENT_THEME"
else
       themepath="/usr/share/themes/$GTK2_CURRENT_THEME"
fi

########################## FUNCTIONS BEGIN ####################################

adjust_xapps ()
{
echo "echo '$1' | xrdb -merge" >> "$xappspicker_rc"
}

adjust_dmenu ()
{
[ -n "$dmenufont" ] && echo -n "-fn $dmenufont " > "$dmenurc"
echo "-nb ${fgbg[1]} -nf ${fgbg[0]} -sb ${fgbg[3]} -sf ${fgbg[2]} " >> "$dmenurc"
echo "Created $dmenurc."
}

adjust_xsetroot ()
{
echo ". $SCRIPT_DIR/posix_compliant_random_functions" >> "$xappspicker_rc"

if [ -d "$bitmapdir" ] ;then
  echo "xsetroot -fg \"$1\" -bg \"$2\" -bitmap \"\$(randombitmap \"$bitmapdir\")\"" >> "$xappspicker_rc"
elif [ -f "$themepath/xsetrootbitmap.xbm" ] ;then
  echo "xsetroot -fg \"$1\" -bg \"$2\" -bitmap \"$themepath/xsetrootbitmap.xbm\"" >> "$xappspicker_rc"
else
  echo "xsetroot -fg \"$1\" -bg \"$2\" -mod \$(( \$(random)%15 + 2)) \$(( \$(random)%15 + 2))" >> "$xappspicker_rc"
fi

#~ if [ -r "$xsetrootbitmap/*xbm" ] ; then
  #~ echo "xsetroot -fg \"$1\" -bg \"$2\" -bitmap \"$xsetrootbitmap\"" >> "$xappspicker_rc"
#~ else
  #~ echo "xsetroot -fg \"$1\" -bg \"$2\" -mod $(( $RANDOM%15 + 2)) $(( $RANDOM%15 + 2))" >> "$xappspicker_rc"
#~ fi
}

grepcol ()
{
# uses a tiny python2 snippet
# fgbg array: fgbg[0] is foreground, fgbg[1] is background
fgbg=($(python2 -c 'import gtk
w = gtk.Window()
w.realize()
style=w.get_style()
print style.fg[gtk.STATE_NORMAL].to_string()
print style.bg[gtk.STATE_NORMAL].to_string()
print style.text[gtk.STATE_SELECTED].to_string()
print style.base[gtk.STATE_SELECTED].to_string()' 2>/dev/null))
# the third one is the background for selected text, aka Highlight

hex12to6
}

hex12to6 ()
{
  for (( i=0 ; i<${#fgbg[@]} ; i++ ))
  do
    # simply discard the last 2 digits of each red, green and blue
    fgbg[i]="#${fgbg[i]:1:2}${fgbg[i]:5:2}${fgbg[i]:9:2}"
  done
}

invert ()
{
  # inverts colors
  r=${1:1:2}
  g=${1:3:2}
  b=${1:5:2}
  printf "#%02x%02x%02x\n" $((16#FF - 16#$r)) $((16#FF - 16#$g)) $((16#FF - 16#$b))
}

# this function halves a color value. deprecated in favor of fixed_value.
# (half of black is still black, so this function is not so useful in automated
# application)
#~ half ()
#~ {
  #~ printf "#%02x%02x%02x" $((16#${1:1:2} / 2)) $((16#${1:3:2} / 2)) $((16#${1:5:2} / 2)) 
#~ }

hextriplet2float ()
{
  # convert the hex representation of one of r,g,b to a float between 0 and 1
  bc<<<"obase=10; ibase=16; scale=3; $1/FF"
}
float255 ()
{
  # multiply a float between 0 and 1 by 255, doh.
  bc<<<"$1*255"
}
fixed_value ()
{
  # sets the value of color $1 (format: #nnnnnn) to $2 (a float between 0 and 1),
  # leaving hue and saturation intact, and returns the resulting color.
  r=${1:1:2}
  r="$(hextriplet2float ${r^^})"
  g=${1:3:2}
  g="$(hextriplet2float ${g^^})"
  b=${1:5:2}
  b="$(hextriplet2float ${b^^})"
  rgb="$r,$g,$b"
  hsv="$(python2 -c "import colorsys
print colorsys.rgb_to_hsv($rgb)")"

  huesat="${hsv%,*}"
  huesat="${huesat##*(}"
  hsv="$huesat,$2"
  rgb="$(python2 -c "import colorsys
print colorsys.hsv_to_rgb($hsv)")"

  rg="${rgb%,*}"
  r="${rg%%,*}"
  r="${r##*(}"
  g="${rg##*,}"
  b="${rgb##*,}"
  b="${b%%)*}"

  r="$(float255 $r)"
  r="${r%%.*}"
  g="$(float255 $g)"
  g="${g%%.*}"
  b="$(float255 $b)"
  b="${b%%.*}"
  printf "#%02x%02x%02x" $r $g $b
}


adjust_tint2 ()
{
killall tint2
tint2rc="$HOME/.themes/$GTK2_CURRENT_THEME/tint2/tint2rc"
if [ -f "$tint2rc" ];then
  echo "tint2 -c \"$tint2rc\" &" >> "$xappspicker_rc"
else
  echo "tint2 &" >> "$xappspicker_rc"
fi
}

# killing processes does not work.
#~ do_conky ()
#~ {
  #~ pid="$(pgrep -f "conky -c ./xappspicker.conkyrc")"
  #~ [[ "x$pid" != "x" ]] && kill "$pid" 
  #~ if [[ -r "$themepath/conky/xappspicker.conkyrc" ]]; then
    #~ echo "cd \"$themepath/conky\"" >> "$xappspicker_rc"
    #~ echo "conky -c \"./xappspicker.conkyrc\" & disown" >> "$xappspicker_rc"
  #~ fi
#~ }
######################## FUNCTIONS END ########################################

######################## MAIN BEGIN ###########################################

# to avoid running the whole script after login, this file should be sourced instead:
xappspicker_rc="$HOME/.local/share/xorg/xappspicker_rc"
rm -f "$xappspicker_rc"
mkdir -p "$(dirname "$xappspicker_rc")"

# since dmenu is not an Xapp, this is optional.
# set to empty string to disable.
dmenurc="$HOME/.config/dmenu/dmenurc"

# font definitions in dmenu 4.6 are unclear to me. they also differ from
# suckless-tools 4.5 - one cannot pass xfont-strings.
# the one below should work on all systems, or at least fail silently.
dmenufont="terminus"

grepcol

# prepare the values for xsetroot. please see man xsetroot.
# 1.: do you want to choose a random bitmap from the following dir?
#     if not, set this to "", and xsetroot will choose:
#      a) the file xsetrootbitmap.xbm from $themedir, or, failing that
#      b) a random -mod.
bitmapdir="$SCRIPT_DIR/xbm/squidfingers"
# 2.: which color to choose as a base for the background? I choose the background for
#     selected text, usually the most colorful accent in the theme. It's the 4th and
#     last color in the array generated by grepcol() = ${fgbg[3]}
# 3.: manipulate that color. 
#     a) i prefer to darken the background to 20%, and the foreground to 10%
xsetrootbg="$(fixed_value "${fgbg[3]}" "0.2")"
xsetrootfg="$(fixed_value "${fgbg[3]}" "0.1")"
#     b) another possibility: color-invert (=negative) the colors
#~ xsetrootbg="$(invert "${fgbg[0]}")" # that is the foreground
#~ xsetrootfg="$(invert "${fgbg[1]}")" # that is the background
# functions can be combined, too.
########
adjust_xsetroot "$xsetrootfg" "$xsetrootbg"

# which xapps will be affected?
# un/comment or add desired values.
# please keep in mind that a leading '!' means 'commented out'
adjust_xapps '!!! background values
! XCalc.ti.Command.background: ${fgbg[1]}
! XCal*background: ${fgbg[1]}
XFontSel*background:  ${fgbg[1]}
display.background:  ${fgbg[1]}
bitmap*background:  ${fgbg[1]}
Xmag*background:  ${fgbg[1]}
Xmag*helpLabel*background:  ${fgbg[0]}
Xman*background:  ${fgbg[1]}
xpdf*background:  ${fgbg[1]}
xpdf*matteColor:  ${fgbg[1]}
xscreensaver*background:  ${fgbg[1]}
! URxvt*borderColor:  ${fgbg[1]}
! *background:  ${fgbg[1]}

!!! forground values
! XCalc.ti.Command.foreground: ${fgbg[0]}
! XCal*foreground: ${fgbg[0]}
XFontSel*foreground: ${fgbg[0]}
display.foreground: ${fgbg[0]}
bitmap*foreground: ${fgbg[0]}
Xmag*foreground: ${fgbg[0]}
Xmag*helpLabel*foreground:  ${fgbg[1]}
Xman*foreground: ${fgbg[0]}
xpdf*foreground: ${fgbg[0]}
xscreensaver*foreground: ${fgbg[0]}
! *foreground: ${fgbg[0]}'

# adjusting dmenu is simpler, we take all 4 colors from the array:
# base fore/background, selected text fore/background.
[ -n "$dmenurc" ] && adjust_dmenu

adjust_tint2

# if the theme contains this file, and it is executable, then execute it.
# this should usually be the last line added to "$xappspicker_rc"
[ -x "$themepath/xappspicker.exec" ] && echo "exec \"$themepath/xappspicker.exec\"" >> "$xappspicker_rc"

# please do not remove this
. "$xappspicker_rc"
